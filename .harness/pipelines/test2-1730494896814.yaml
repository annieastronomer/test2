pipeline:
  name: CICD
  identifier: Build_annieastronomer_test2_1730494906933
  projectIdentifier: default_project
  orgIdentifier: default
  stages:
    - stage:
        name: AstroBuildDeploy
        identifier: Build
        type: CI
        spec:
          cloneCodebase: true
          execution:
            steps:
              - step:
                  type: Run
                  name: BuildAstroRuntime
                  identifier: Echo_Welcome_Message
                  spec:
                    shell: Sh
                    command: |-
                      #!/bin/bash
                      set -ex
                      pwd
                      ls -la .
                      ls -la ~
                      # Prerequisites: Set variables
                      ORGANIZATION_ID=$ASTRO_ORG_ID
                      DEPLOYMENT_ID=$ASTRO_DEPLOYMENT_ID
                      ASTRO_API_TOKEN=$ASTRO_API_TOKEN
                      ASTRO_PROJECT_PATH=.
                      # Step 1: Initialize deploy
                      echo -e "Initiating Deploy Process for deployment $DEPLOYMENT_ID\n"
                      CREATE_DEPLOY=$(curl --location --request POST "https://api.astronomer.io/platform/v1beta1/organizations/$ORGANIZATION_ID/deployments/$DEPLOYMENT_ID/deploys" \
                      --header "X-Astro-Client-Identifier: script" \
                      --header "Content-Type: application/json" \
                      --header "Authorization: Bearer $ASTRO_API_TOKEN" \
                      --data '{
                      "type": "IMAGE_AND_DAG"
                      }' | jq '.')
                      DEPLOY_ID=$(echo $CREATE_DEPLOY | jq -r '.id')
                      REPOSITORY=$(echo $CREATE_DEPLOY | jq -r '.imageRepository')
                      TAG=$(echo $CREATE_DEPLOY | jq -r '.imageTag')
                      DAGS_UPLOAD_URL=$(echo $CREATE_DEPLOY | jq -r '.dagsUploadUrl')
                      # Step 2: Log in to Docker
                      docker login images.astronomer.cloud -u cli -p $ASTRO_API_TOKEN
                      echo -e "\nBuilding Docker image $REPOSITORY:$TAG for $DEPLOYMENT_ID from $ASTRO_PROJECT_PATH"
                      # Step 3: Build image
                      docker build -t $REPOSITORY:$TAG --platform=linux/amd64 $ASTRO_PROJECT_PATH
                      # Step 4: Push image
                      echo -e "\nPushing Docker image $REPOSITORY:$TAG to $DEPLOYMENT_ID"
                      docker push $REPOSITORY:$TAG
                      # Step 5: Create tar file
                      echo -e "\nCreating a dags tar file from $ASTRO_PROJECT_PATH/dags and stored in $ASTRO_PROJECT_PATH/dags.tar\n"
                      cd $ASTRO_PROJECT_PATH
                      tar -cvf "$ASTRO_PROJECT_PATH/dags.tar" "dags"
                      # Step 6: Upload DAGs tar file
                      echo -e "\nUploading tar file $ASTRO_PROJECT_PATH/dags.tar\n"
                      VERSION_ID=$(curl -i --request PUT $DAGS_UPLOAD_URL \
                      --header 'x-ms-blob-type: BlockBlob' \
                      --header 'Content-Type: application/x-tar' \
                      --upload-file "$ASTRO_PROJECT_PATH/dags.tar" | grep x-ms-version-id | awk -F': ' '{print $2}')
                      VERSION_ID=$(echo $VERSION_ID | sed 's/\r//g') # Remove unexpected carriage return characters
                      echo -e "\nTar file uploaded with version: $VERSION_ID\n"
                      # Step 7: Finalizing Deploy
                      FINALIZE_DEPLOY=$(curl --location --request POST "https://api.astronomer.io/platform/v1beta1/organizations/$ORGANIZATION_ID/deployments/$DEPLOYMENT_ID/deploys/$DEPLOY_ID/finalize" \
                      --header "X-Astro-Client-Identifier: script" \
                      --header "Content-Type: application/json" \
                      --header "Authorization: Bearer $ASTRO_API_TOKEN" \
                      --data '{"dagTarballVersion": "'$VERSION_ID'"}')
                      ID=$(echo $FINALIZE_DEPLOY | jq -r '.id')
                      if [[ "$ID" != null ]]; then
                              echo -e "\nDeploy is Finalized. Image and DAG changes for deployment $DEPLOYMENT_ID should be live in a few minutes"
                              echo "Deployed Image tag: $TAG"
                              echo "Deployed DAG Tarball Version: $VERSION_ID"
                      else
                              MESSAGE=$(echo $FINALIZE_DEPLOY | jq -r '.message')
                              if  [[ "$MESSAGE" != null ]]; then
                                      echo $MESSAGE
                              else
                                      echo "Something went wrong. Reach out to astronomer support for assistance"
                              fi
                      fi
                      # Cleanup
                      echo -e "\nCleaning up the created tar file from $ASTRO_PROJECT_PATH/dags.tar"
                      rm -rf "$ASTRO_PROJECT_PATH/dags.tar"
          platform:
            os: Linux
            arch: Arm64
          runtime:
            type: Cloud
            spec: {}
          caching:
            enabled: false
            paths: []
          buildIntelligence:
            enabled: false
        description: ""
  properties:
    ci:
      codebase:
        connectorRef: account.Github_OAuth_1730489242443
        repoName: annieastronomer/test2
        build: <+input>
  tags: {}
  variables:
    - name: ASTRO_DEPLOYMENT_ID
      type: String
      description: Astro Deployment ID
      required: true
      value: cm2yvgdiw058z01i3n3ik9riu
    - name: ASTRO_API_TOKEN
      type: String
      description: Astro Workspace API Token
      required: true
      value: eyJhbGciOiJSUzI1NiIsImtpZCI6ImNsb2Q0aGtqejAya3AwMWozdWNqbzJwOHIiLCJ0eXAiOiJKV1QifQ.eyJhcGlUb2tlbklkIjoiY20yeXJvaXI3MDRqMTAxaTNpaGhna2c4aSIsImF1ZCI6ImFzdHJvbm9tZXItZWUiLCJpYXQiOjE3MzA0Njc1MTgsImlzQXN0cm9ub21lckdlbmVyYXRlZCI6dHJ1ZSwiaXNJbnRlcm5hbCI6ZmFsc2UsImlzcyI6Imh0dHBzOi8vYXBpLmFzdHJvbm9tZXIuaW8iLCJraWQiOiJjbG9kNGhranowMmtwMDFqM3Vjam8ycDhyIiwicGVybWlzc2lvbnMiOlsiYXBpVG9rZW5JZDpjbTJ5cm9pcjcwNGoxMDFpM2loaGdrZzhpIiwid29ya3NwYWNlSWQ6Y2x6OGRxbHF3MTJyNzAxa3huM3c3YmZzZCIsIm9yZ2FuaXphdGlvbklkOmNsa3ZoM2I0NjAwM20wMWtiYWxnd3dkY3kiLCJvcmdTaG9ydE5hbWU6Y2xrdmgzYjQ2MDAzbTAxa2JhbGd3d2RjeSJdLCJzY29wZSI6ImFwaVRva2VuSWQ6Y20yeXJvaXI3MDRqMTAxaTNpaGhna2c4aSB3b3Jrc3BhY2VJZDpjbHo4ZHFscXcxMnI3MDFreG4zdzdiZnNkIG9yZ2FuaXphdGlvbklkOmNsa3ZoM2I0NjAwM20wMWtiYWxnd3dkY3kgb3JnU2hvcnROYW1lOmNsa3ZoM2I0NjAwM20wMWtiYWxnd3dkY3kiLCJzdWIiOiJjbHo3OGhuYzUweHRsMDFqeWFyMXp3am5rIiwidmVyc2lvbiI6ImNtMnlyb2lyNzA0ajAwMWkzc2NhcDdpM2cifQ.N6X34SW6qve0CqC04NUtXjJlaN66bJio7u-JTqP6Hl9ld4DnH95CoBZv0vOjm1BXwO4nX93ssnyjXTX1s-9t2d9Oxe4DD5pGxNokrunTPk09G4zkGGJGQuLlm7KsycqJFURHBh7FfegCDmpQH52dOk64J6y1AefoOg2Nnq5kaYvW_Bj4BHPFE2rsHmVLJwquyBHbYdBOvlLgo80PsnPk7n8OIuQP1YUlRyUu6_-YEET6Fqlly75Mo7hb6rBndv8X4qYORAaIQQ_6KWodAtN7FJjFrjSX7NSkEQVhU-D8fBhOxgay46WvM0ry658sqRtwXrjJiqCIApobVBj6X2fhtA
    - name: ASTRO_ORG_ID
      type: String
      description: Astro Org ID
      required: false
      value: clkvh3b46003m01kbalgwwdcy
